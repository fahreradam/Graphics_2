#version 430
in vec2 v_texcoord;
in vec3 v_normal;
in vec3 v_worldpos;
in vec4 v_tangent;
in vec2 b_texcoord;
in float v_eyeDist;

#define ambientColor1 vec3(0.1,0.1,0.1)
#define ambientColor2 vec3(0.2,0.2,0.2)



out vec4 color;
layout(binding=0) uniform sampler2DArray tex;
layout(binding=1) uniform sampler2DArray emittex;
layout(binding=2) uniform sampler2DArray bumpmapTexture;
layout(binding=3) uniform sampler2DArray metallicityRoughnessTexture;
layout(binding=7) uniform samplerCube envMap;
layout(binding=10) uniform sampler2DArray shadowBuffer;
layout(binding=15) uniform sampler2DArray depthtex;


vec3 schlickFresnel(vec3 F0, float cos_phi, vec3 objectColor, float metallicity){
    vec3 one_minus_F0 = vec3(1.0)-F0;
    return F0 + one_minus_F0 * pow(1.0 - cos_phi,5.0);
}

vec3 schlickDiffuse( vec3 F, float cos_phi,
        float mu, vec3 baseColor,
        float cos_theta_i )
{
    vec3 d = mix( 0.96*baseColor , vec3(0), mu );
    //might want to divide by pi here
    return cos_theta_i * ( vec3(1.0)-F) * d ;
}

vec3 schlickSpecular( vec3 F, float cos_phi, float cos_psi,
        vec3 baseColor, float cos_theta_i,
        float cos_theta_o, float rho, float mu)
{
    float rho2 = rho*rho;

    float disc1 = max(0.0,
            rho2 + (1.0-rho2) * cos_theta_o * cos_theta_o );
    float disc2 = max(0.0,
            rho2 + (1.0-rho2) * cos_theta_i * cos_theta_i );
    float denom = max(0.0001,
            cos_theta_i * sqrt( disc1 ) +
            cos_theta_o * sqrt( disc2 )
    );

    float V = 1.0 / (2.0 * denom );
    float tmp = rho / (1.0 + cos_psi*cos_psi * (rho2-1.0) );
    float D = 1.0/3.14 * tmp*tmp;
    return cos_theta_i * F * V * D;
}

float lambert(vec3 L, vec3 N ){
    float diffuse = dot(L,N);
    diffuse = max( 0.0, diffuse );
    return diffuse;
}

float phong(vec3 V, vec3 R){
    float specular = dot(V,R);
    specular = max(specular,0.0);
    specular = pow(specular,16.0);
    return specular;
}

void applyLighting(
    vec3 baseColor,
    vec3 lightPosition,
    vec3 spotDirection,
    vec3 lightColor,
    float cosineSpotEdgeStart,
    float cosineSpotAngleCutoff,
    vec4 attenuationsAndSpecular,
    vec3 N,
    vec3 V,
    inout vec3 totalillum)
{
    //compute some geometric parameters

    //vector from point to light
    vec3 L = ( lightPosition - v_worldpos);
    float lightDistance = length(L);
    L /= lightDistance;

    //direction of maximum specularity
    vec3 R = reflect(-L,N);


    //diffuse and specular computation
    float dp = lambert(L, N);
    float sp = phong(L, R);

    //apply distance attenuation + spotlight cone attenuation
    vec3 attenuation = attenuationsAndSpecular.xyz;
    float A = 1.0/(attenuation[0] +
        attenuation[1]*lightDistance +
        attenuation[2]*lightDistance*lightDistance);
    A = min(1.0,A);

    float cosineTheta = dot(-L,spotDirection);
    float spotAttenuation = smoothstep(
        cosineSpotAngleCutoff, cosineSpotEdgeStart, cosineTheta);

    dp *= A;
    dp *= spotAttenuation;
    sp *= A;
    sp *= spotAttenuation;

    //some lights are only there to prevent scene from appearing "too dark"
    //we don't apply specular to those lights. This is a hack,
    //and it's not physically based
    sp *= attenuationsAndSpecular.w;

    totalillum += dp*lightColor;
    totalillum += sp*lightColor;
}


void main(){
    vec4 baseColor = texture(tex, vec3( v_texcoord,0.0) );

    vec3 N = normalize(v_normal);
    vec3 V = normalize( eyePos.xyz - v_worldpos );

    float mappedY = 0.5*(N.y + 1.0);
    vec3 ambientColor = mix(
            ambientColor1, ambientColor2, mappedY);
    ambientColor *= baseColor.rgb;
    vec3 totalillum = vec3(0,0,0);
    for(int i=0;i<MAX_LIGHTS;++i){
        applyLighting(
            baseColor.rgb,
            lightPositionsAndDirectionalFlag[i].xyz,
            spotDirectionsAndCosineSpotEdgeStarts[i].xyz,
            lightColorsAndCosineSpotAngleCutoffs[i].xyz,
            spotDirectionsAndCosineSpotEdgeStarts[i].w,
            lightColorsAndCosineSpotAngleCutoffs[i].w,
            attenuation,
            N,V,
            totalillum );
    }
    color.rgb = ambientColor + totalillum;
    color.a = baseColor.a;
}
